stages: [bootstrap, tf_fmt, tf_validate, tf_plan, tf_apply, deploy, tf_destroy]

variables:
  AWS_DEFAULT_REGION: "us-east-1"
  TF_STATE_BUCKET:    "tfstate-services-web-project-${CI_PROJECT_ID}"
  TF_LOCK_TABLE:      "tf-lock-services-web-project"

bootstrap_backend:
  image: amazon/aws-cli:2.15.0
  stage: bootstrap
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"'
      when: on_success
    - when: manual
  script: |
    set -euo pipefail
    echo "==> Create S3 bucket if not exists"
    if ! aws s3api head-bucket --bucket "${TF_STATE_BUCKET}" 2>/dev/null; then
      aws s3api create-bucket --bucket "${TF_STATE_BUCKET}" --create-bucket-configuration LocationConstraint="${AWS_DEFAULT_REGION}" || true
      aws s3api put-bucket-versioning --bucket "${TF_STATE_BUCKET}" --versioning-configuration Status=Enabled
      aws s3api put-public-access-block --bucket "${TF_STATE_BUCKET}" \
        --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
      aws s3api put-bucket-encryption --bucket "${TF_STATE_BUCKET}" \
        --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
      echo "Bucket created/configured."
    else
      echo "Bucket already exists."
    fi

    echo "==> Create DynamoDB table if not exists"
    if ! aws dynamodb describe-table --table-name "${TF_LOCK_TABLE}" >/dev/null 2>&1; then
      aws dynamodb create-table \
        --table-name "${TF_LOCK_TABLE}" \
        --attribute-definitions AttributeName=LockID,AttributeType=S \
        --key-schema AttributeName=LockID,KeyType=HASH \
        --billing-mode PAY_PER_REQUEST
      echo "Waiting table to be ACTIVE..."
      aws dynamodb wait table-exists --table-name "${TF_LOCK_TABLE}"
    else
      echo "Table already exists."
    fi

    echo "==> Done"
  needs: []
