{{- $name := required "dbCredentials.name must be set" .Values.dbCredentials.name -}}
{{- $src  := default "file" .Values.dbCredentials.source -}}

{{- if eq $src "file" -}}
  {{- $raw := .Files.Get "secrets/db-credentials.yaml" | required "Place your secret at webproject/secrets/db-credentials.yaml (not in Git)" -}}
  {{- $db  := $raw | fromYaml -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name }}
type: Opaque
stringData:
  username:      {{ required "missing username in secrets/db-credentials.yaml"      (index $db "username")      | quote }}
  password:      {{ required "missing password in secrets/db-credentials.yaml"      (index $db "password")      | quote }}
  root-password: {{ required "missing root-password in secrets/db-credentials.yaml" (index $db "root-password") | quote }}
  database:      {{ default "wordpress" (index $db "database") | quote }}
{{- else if eq $src "external" -}}
# dbCredentials.source=external -> ce chart n'émet PAS de Secret ;
# le Secret {{ $name }} doit exister (créé par AWS/ESO, ou autre).
{{- else -}}
{{- fail (printf "Unsupported dbCredentials.source=%s (use file|external)" $src) -}}
{{- end -}}
